package MyShapes.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;

public class MyShapesFactory {
  public static class NodeFactory_7126740561890812868 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode original = sampleNode;
        if (SNodeOperations.isInstanceOf(original, CONCEPTS.Shape$6i)) {
          SLinkOperations.setTarget(newNode, LINKS.color$kKlg, SLinkOperations.getTarget(original, LINKS.color$kKlg));
        }
      }
    }
  }
  public static class NodeFactory_7126740561890766482 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode circle = sampleNode;
        if (SNodeOperations.isInstanceOf(circle, CONCEPTS.Circle$YK)) {
          SPropertyOperations.assign(newNode, PROPS.upperLeftX$W3PF, SPropertyOperations.getInteger(circle, PROPS.x$raZO));
          SPropertyOperations.assign(newNode, PROPS.upperLeftY$W9f2, SPropertyOperations.getInteger(circle, PROPS.y$rgpb));
          SPropertyOperations.assign(newNode, PROPS.size$W9W5, SPropertyOperations.getInteger(circle, PROPS.radius$rh6e));
        }
      }
      {
        final SNode square = sampleNode;
        if (SNodeOperations.isInstanceOf(square, CONCEPTS.Square$Zf)) {
          SPropertyOperations.assign(newNode, PROPS.upperLeftX$W3PF, SPropertyOperations.getInteger(square, PROPS.upperLeftX$W3PF));
          SPropertyOperations.assign(newNode, PROPS.upperLeftY$W9f2, SPropertyOperations.getInteger(square, PROPS.upperLeftY$W9f2));
          SPropertyOperations.assign(newNode, PROPS.size$W9W5, SPropertyOperations.getInteger(square, PROPS.size$W9W5));
        }
      }
    }
  }
  public static class NodeFactory_7126740561890823407 implements NodeFactory {
    public void setup(SNode newNode, SNode sampleNode, SNode enclosingNode, SModel model) {
      {
        final SNode square = sampleNode;
        if (SNodeOperations.isInstanceOf(square, CONCEPTS.Square$Zf)) {
          SPropertyOperations.assign(newNode, PROPS.x$raZO, SPropertyOperations.getInteger(square, PROPS.upperLeftX$W3PF));
          SPropertyOperations.assign(newNode, PROPS.y$rgpb, SPropertyOperations.getInteger(square, PROPS.upperLeftY$W9f2));
          SPropertyOperations.assign(newNode, PROPS.radius$rh6e, SPropertyOperations.getInteger(square, PROPS.size$W9W5));
        }
      }

      {
        final SNode circle = sampleNode;
        if (SNodeOperations.isInstanceOf(circle, CONCEPTS.Circle$YK)) {
          SPropertyOperations.assign(newNode, PROPS.x$raZO, SPropertyOperations.getInteger(circle, PROPS.x$raZO));
          SPropertyOperations.assign(newNode, PROPS.y$rgpb, SPropertyOperations.getInteger(circle, PROPS.y$rgpb));
          SPropertyOperations.assign(newNode, PROPS.radius$rh6e, SPropertyOperations.getInteger(circle, PROPS.radius$rh6e));
        }
      }


    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Shape$6i = MetaAdapterFactory.getConcept(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4cf955L, "MyShapes.structure.Shape");
    /*package*/ static final SConcept Circle$YK = MetaAdapterFactory.getConcept(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, "MyShapes.structure.Circle");
    /*package*/ static final SConcept Square$Zf = MetaAdapterFactory.getConcept(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, "MyShapes.structure.Square");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink color$kKlg = MetaAdapterFactory.getContainmentLink(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4cf955L, 0x59b6c2a98c4eafc3L, "color");
  }

  private static final class PROPS {
    /*package*/ static final SProperty upperLeftX$W3PF = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a89L, "upperLeftX");
    /*package*/ static final SProperty x$raZO = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db056L, "x");
    /*package*/ static final SProperty upperLeftY$W9f2 = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a8bL, "upperLeftY");
    /*package*/ static final SProperty y$rgpb = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db058L, "y");
    /*package*/ static final SProperty size$W9W5 = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a8eL, "size");
    /*package*/ static final SProperty radius$rh6e = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db05bL, "radius");
  }
}
