package MyShapes.Enhanced.behavior;

/*Generated by MPS */

import javax.swing.JComponent;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.JPanel;
import java.awt.Graphics;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.beans.Transient;
import java.awt.Dimension;
import javax.swing.border.Border;
import javax.swing.border.TitledBorder;
import MyShapes.generator.helpers.DrawHelpers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import BaseLanguage.Utils.Code.ColorHelpers;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public class Helpers {
  public static JComponent CreateScenePreviewComponent(final SNode node) {
    return new JPanel() {
      @Override
      protected void paintComponent(final Graphics g) {
        super.paintComponent(g);
        SNodeOperations.getModel(node).getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            ListSequence.fromList(SLinkOperations.getChildren(node, LINKS.shapes$Sdex)).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                Helpers.DrawShape(g, it);
              }
            });
          }
        });
      }

      @Transient
      @Override
      public Dimension getPreferredSize() {
        return new Dimension(500, 500);
      }

      @Override
      public Border getBorder() {
        return new TitledBorder("Instant Preview");
      }
    };
  }

  public static JComponent CreateSquareShapePreviewComponent(final SNode node) {
    return new ShapePreviewComponent(node) {
      @Override
      protected void DrawShape(Graphics g) {
        DrawHelpers.DrawSquare(g, 10, 10, SPropertyOperations.getInteger(node, PROPS.size$W9W5), ColorHelpers.GetColor(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.color$kKlg), LINKS.target$loZf), PROPS.name$MnvL)));
      }
      @Override
      protected Dimension GetDimension() {
        return new Dimension(20 + SPropertyOperations.getInteger(node, PROPS.size$W9W5), 20 + SPropertyOperations.getInteger(node, PROPS.size$W9W5));
      }
    };
  }

  public static JComponent CreateCircleShapePreviewComponent(final SNode node) {
    return new ShapePreviewComponent(node) {
      @Override
      protected void DrawShape(Graphics g) {
        DrawHelpers.DrawCircle(g, 10, 10, SPropertyOperations.getInteger(node, PROPS.radius$rh6e), ColorHelpers.GetColor(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(node, LINKS.color$kKlg), LINKS.target$loZf), PROPS.name$MnvL)));
      }
      @Override
      protected Dimension GetDimension() {
        return new Dimension(20 + SPropertyOperations.getInteger(node, PROPS.radius$rh6e), 20 + SPropertyOperations.getInteger(node, PROPS.radius$rh6e));
      }
    };
  }

  private static void DrawShape(Graphics g, SNode shape) {
    {
      final SNode circle = shape;
      if (SNodeOperations.isInstanceOf(circle, CONCEPTS.Circle$YK)) {
        DrawHelpers.DrawCircle(g, SPropertyOperations.getInteger(circle, PROPS.x$raZO), SPropertyOperations.getInteger(circle, PROPS.y$rgpb), SPropertyOperations.getInteger(circle, PROPS.radius$rh6e), ColorHelpers.GetColor(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(circle, LINKS.color$kKlg), LINKS.target$loZf), PROPS.name$MnvL)));
        return;
      }
    }
    {
      final SNode square = shape;
      if (SNodeOperations.isInstanceOf(square, CONCEPTS.Square$Zf)) {
        DrawHelpers.DrawSquare(g, SPropertyOperations.getInteger(square, PROPS.upperLeftX$W3PF), SPropertyOperations.getInteger(square, PROPS.upperLeftY$W9f2), SPropertyOperations.getInteger(square, PROPS.size$W9W5), ColorHelpers.GetColor(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(square, LINKS.color$kKlg), LINKS.target$loZf), PROPS.name$MnvL)));
        return;
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink shapes$Sdex = MetaAdapterFactory.getContainmentLink(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4cf37dL, 0x59b6c2a98c4cf956L, "shapes");
    /*package*/ static final SContainmentLink color$kKlg = MetaAdapterFactory.getContainmentLink(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4cf955L, 0x59b6c2a98c4eafc3L, "color");
    /*package*/ static final SReferenceLink target$loZf = MetaAdapterFactory.getReferenceLink(0x97c1388be8914959L, 0x85e03de45135ef54L, 0x59b6c2a98c4e9876L, 0x59b6c2a98c4e9877L, "target");
  }

  private static final class PROPS {
    /*package*/ static final SProperty size$W9W5 = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a8eL, "size");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty radius$rh6e = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db05bL, "radius");
    /*package*/ static final SProperty x$raZO = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db056L, "x");
    /*package*/ static final SProperty y$rgpb = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db058L, "y");
    /*package*/ static final SProperty upperLeftX$W3PF = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a89L, "upperLeftX");
    /*package*/ static final SProperty upperLeftY$W9f2 = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, 0x59b6c2a98c5d5a8bL, "upperLeftY");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept Circle$YK = MetaAdapterFactory.getConcept(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, "MyShapes.structure.Circle");
    /*package*/ static final SConcept Square$Zf = MetaAdapterFactory.getConcept(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040bL, "MyShapes.structure.Square");
  }
}
