package MyShapes.Enhanced.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import javax.swing.JPanel;
import java.awt.Graphics;
import MyShapes.generator.helpers.DrawHelpers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import MyColor.Helpers.ColorHelpers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.awt.Dimension;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SReferenceLink;

/*package*/ class Circle_ShapePreview_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Circle_ShapePreview_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Indent());
    editorCell.setCellId("Collection_347ksb_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createNextEditor_0());
    editorCell.addEditorCell(createJComponent_0());
    return editorCell;
  }
  private EditorCell createNextEditor_0() {
    try {
      getCellFactory().pushCellContext();
      getCellFactory().removeCellContextHints(new String[]{"MyShapes.Enhanced.editor.Shapes.ShapePreview"});
      {
        EditorCell editorCell = getCellFactory().createEditorCell(myNode, false, Circle_ShapePreview_Editor.class);
        return editorCell;
      }
    } finally {
      getCellFactory().popCellContext();
    }
  }
  private EditorCell createJComponent_0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, _QueryFunction_JComponent_347ksb_a1a(), "JComponent_347ksb_b0");
    editorCell.setCellId("JComponent_347ksb_b0_0");
    return editorCell;
  }
  private JComponent _QueryFunction_JComponent_347ksb_a1a() {
    final ModelAccess modelAccess = SNodeOperations.getModel(myNode).getRepository().getModelAccess();

    return new JPanel() {
      @Override
      protected void paintComponent(final Graphics g) {
        setOpaque(false);
        super.paintComponent(g);
        modelAccess.runReadAction(new Runnable() {
          public void run() {
            DrawHelpers.DrawCircle(g, 10, 10, SPropertyOperations.getInteger(myNode, PROPS.radius$rh6e), ColorHelpers.GetColor(SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(myNode, LINKS.color$kKlg), LINKS.target$loZf), PROPS.name$MnvL)));
          }
        });
      }

      @Override
      public Dimension getPreferredSize() {
        final Dimension dimension = new Dimension();
        modelAccess.runReadAction(new Runnable() {
          public void run() {
            dimension.width = 20 + SPropertyOperations.getInteger(myNode, PROPS.radius$rh6e);
            dimension.height = 20 + SPropertyOperations.getInteger(myNode, PROPS.radius$rh6e);
          }
        });
        return dimension;
      }
    };
  }

  private static final class PROPS {
    /*package*/ static final SProperty radius$rh6e = MetaAdapterFactory.getProperty(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4d040aL, 0x59b6c2a98c4db05bL, "radius");
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink color$kKlg = MetaAdapterFactory.getContainmentLink(0xf27753254788418aL, 0xb75972b67f771c05L, 0x59b6c2a98c4cf955L, 0x59b6c2a98c4eafc3L, "color");
    /*package*/ static final SReferenceLink target$loZf = MetaAdapterFactory.getReferenceLink(0x97c1388be8914959L, 0x85e03de45135ef54L, 0x59b6c2a98c4e9876L, 0x59b6c2a98c4e9877L, "target");
  }
}
